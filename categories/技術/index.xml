<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術 on 備忘録（仮）</title><link>https://OrangeCocoa.github.io/categories/%E6%8A%80%E8%A1%93/</link><description>Recent content in 技術 on 備忘録（仮）</description><generator>Hugo</generator><language>ja-jp</language><lastBuildDate>Sun, 25 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://OrangeCocoa.github.io/categories/%E6%8A%80%E8%A1%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo＋GitHubPagesデプロイ時にLibSassを使う</title><link>https://OrangeCocoa.github.io/posts/2024/hugogithubpages%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E6%99%82%E3%81%ABlibsass%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://OrangeCocoa.github.io/posts/2024/hugogithubpages%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E6%99%82%E3%81%ABlibsass%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>GitHubPages構築にGitHubActionsを使ってデプロイしていますが、scssを使って記述したcssをGitHub上でコンパイルするため行なった対応です。
LibSassは現在公式から非推奨となっていますが、対応した事例が英語のディスカッションでしかなかったため、DartSassに移行する前にひとまず対応してみました。
てきとうに作ったscssファイルを resources.ToCSSで変換する処理を普通に書きます。
&amp;lt;head&amp;gt;タグ内
{{ $options := (dict &amp;#34;transpiler&amp;#34; &amp;#34;libsass&amp;#34; &amp;#34;targetPath&amp;#34; &amp;#34;css/style.css&amp;#34;) }} {{ with resources.Get &amp;#34;css/tekitou.scss&amp;#34; | toCSS $options | minify }} &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;{{ .RelPermalink }}&amp;#34; integrity=&amp;#34;{{ .Data.Integrity }}&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; ワークフロー内でHugoをセットアップする処理の中にextended: trueの記述を追加します。
これはHugoの拡張バージョンを使用するように設定するものですが、LibSassトランスパイラは拡張版に含まれるものであるとドキュメントに明記しているため、
初期値falseのままではLibSassを利用できません。
config.yml
name: github pages on: push: branches: - master # Set a branch name to trigger deployment jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description></item><item><title>Hugo＋GitHubPages＋GitHubActionsでWebサイトを公開しよう</title><link>https://OrangeCocoa.github.io/posts/2024/hugogithubpagesgithubactions%E3%81%A7web%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%82%88%E3%81%86/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><guid>https://OrangeCocoa.github.io/posts/2024/hugogithubpagesgithubactions%E3%81%A7web%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%82%88%E3%81%86/</guid><description>Webページ作成はHTMLべた書きでめんどくさくて時間もかかるし大して面白くない、レンダリングエンジン作る方が面白そう、とそんなイメージを持っていましたが、
HUGOとGitHubActionsを使って公開まで自動化ができるというのを見て興味が出る。
この記事は実際にデプロイして公開までやってみた備忘録になります。
現時点でWebの知識もお金も全くないです。
公開先をGitHub PagesにするかNetlifyにするかで迷いましたが、いろいろとめんどくさくないGitHubPagesに決定。
注意点ですが、GitHub Pagesはアフィリエイトなどの運用は恐らく認められていません。
GitHubでソースコード公開してるので、気になったら参考にどうぞ。
https://github.com/OrangeCocoa/Hugo_OrangeCocoa.github.io
クイックスタートガイドはここ
HugoHTMLでよく使うGoテンプレートの基本構文はここ
（リンクを英語ドキュメントから日本語ドキュメントに差し替えましたが、一部翻訳ページがないものもあります）
目次
Hugoのインストール Hugoのセットアップ シングルページとリストページの作成 TOPページの作成 GitHub リポジトリの作成と、GitHub Actionsへのフック デプロイエラー解決 画像の挿入 コメント欄の追加 Markdownの変換挙動をカスタマイズする リンクを別タブで開く Markdown内でmermaid記法を使う Markdown内でCSS定義したスタイルを使う Markdown内でGoAT記法を使う Google検索で表示させる Hugoのインストール ここからDL
Windowsなので
winget install Hugo.Hugo.Extended
でインストール。
環境変数に登録までされるので、これが一番楽。
Hugoのセットアップ コマンドプロンプトを開き、
# カレントディレクトリにHugoのプロジェクトが新規作成される hugo new site [Hugoプロジェクト名] cd [Hugoプロジェクト名] # HTMLのビルド hugo # ローカルサーバー起動 hugo server hugo new site でいくつかフォルダが作られるが、よく使うのはcontent, layouts, staticの三つ。
またhugo.tomlはプロジェクトの設定ファイルになるので、これもよく編集します。
フォルダ構成はこんな感じ。
p r o j e c t a a c d l s t h r s o a a t h u c s n t y a e g h e t a o t m o e t e u i e .</description></item></channel></rss>